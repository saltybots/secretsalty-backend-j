/*
 * This file is generated by jOOQ.
 */
package data.jooq.tables;

import data.jooq.Keys;
import data.jooq.Public;
import data.jooq.tables.records.AppParticipantRecord;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class AppParticipant extends TableImpl<AppParticipantRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>public.app_participant</code> */
  public static final AppParticipant APP_PARTICIPANT = new AppParticipant();

  /** The class holding records for this type */
  @Override
  public Class<AppParticipantRecord> getRecordType() {
    return AppParticipantRecord.class;
  }

  /** The column <code>public.app_participant.group_uuid</code>. */
  public final TableField<AppParticipantRecord, UUID> GROUP_UUID =
      createField(DSL.name("group_uuid"), SQLDataType.UUID, this, "");

  /** The column <code>public.app_participant.user_uuid</code>. */
  public final TableField<AppParticipantRecord, UUID> USER_UUID =
      createField(DSL.name("user_uuid"), SQLDataType.UUID, this, "");

  /** The column <code>public.app_participant.created</code>. */
  public final TableField<AppParticipantRecord, LocalDateTime> CREATED =
      createField(
          DSL.name("created"),
          SQLDataType.LOCALDATETIME(6)
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  /** The column <code>public.app_participant.last_modified</code>. */
  public final TableField<AppParticipantRecord, LocalDateTime> LAST_MODIFIED =
      createField(
          DSL.name("last_modified"),
          SQLDataType.LOCALDATETIME(6)
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  /** The column <code>public.app_participant.excluded</code>. */
  public final TableField<AppParticipantRecord, UUID> EXCLUDED =
      createField(DSL.name("excluded"), SQLDataType.UUID, this, "");

  /** The column <code>public.app_participant.avoid</code>. */
  public final TableField<AppParticipantRecord, UUID> AVOID =
      createField(DSL.name("avoid"), SQLDataType.UUID, this, "");

  /** The column <code>public.app_participant.interests</code>. */
  public final TableField<AppParticipantRecord, String> INTERESTS =
      createField(DSL.name("interests"), SQLDataType.VARCHAR, this, "");

  /** The column <code>public.app_participant.bengerl_uuid</code>. */
  public final TableField<AppParticipantRecord, UUID> BENGERL_UUID =
      createField(DSL.name("bengerl_uuid"), SQLDataType.UUID, this, "");

  private AppParticipant(Name alias, Table<AppParticipantRecord> aliased) {
    this(alias, aliased, null);
  }

  private AppParticipant(Name alias, Table<AppParticipantRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>public.app_participant</code> table reference */
  public AppParticipant(String alias) {
    this(DSL.name(alias), APP_PARTICIPANT);
  }

  /** Create an aliased <code>public.app_participant</code> table reference */
  public AppParticipant(Name alias) {
    this(alias, APP_PARTICIPANT);
  }

  /** Create a <code>public.app_participant</code> table reference */
  public AppParticipant() {
    this(DSL.name("app_participant"), null);
  }

  public <O extends Record> AppParticipant(
      Table<O> child, ForeignKey<O, AppParticipantRecord> key) {
    super(child, key, APP_PARTICIPANT);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Public.PUBLIC;
  }

  @Override
  public List<ForeignKey<AppParticipantRecord, ?>> getReferences() {
    return Arrays.asList(
        Keys.APP_PARTICIPANT__APP_PARTICIPANT_GROUP_UUID_FKEY,
        Keys.APP_PARTICIPANT__APP_PARTICIPANT_USER_UUID_FKEY,
        Keys.APP_PARTICIPANT__APP_PARTICIPANT_EXCLUDED_FKEY,
        Keys.APP_PARTICIPANT__APP_PARTICIPANT_AVOID_FKEY,
        Keys.APP_PARTICIPANT__APP_PARTICIPANT_BENGERL_UUID_FKEY);
  }

  private transient AppGroup _appGroup;
  private transient AppUser _appParticipantUserUuidFkey;
  private transient AppUser _appParticipantExcludedFkey;
  private transient AppUser _appParticipantAvoidFkey;
  private transient AppUser _appParticipantBengerlUuidFkey;

  /** Get the implicit join path to the <code>public.app_group</code> table. */
  public AppGroup appGroup() {
    if (_appGroup == null) {
      _appGroup = new AppGroup(this, Keys.APP_PARTICIPANT__APP_PARTICIPANT_GROUP_UUID_FKEY);
    }

    return _appGroup;
  }

  /**
   * Get the implicit join path to the <code>public.app_user</code> table, via the <code>
   * app_participant_user_uuid_fkey</code> key.
   */
  public AppUser appParticipantUserUuidFkey() {
    if (_appParticipantUserUuidFkey == null) {
      _appParticipantUserUuidFkey =
          new AppUser(this, Keys.APP_PARTICIPANT__APP_PARTICIPANT_USER_UUID_FKEY);
    }

    return _appParticipantUserUuidFkey;
  }

  /**
   * Get the implicit join path to the <code>public.app_user</code> table, via the <code>
   * app_participant_excluded_fkey</code> key.
   */
  public AppUser appParticipantExcludedFkey() {
    if (_appParticipantExcludedFkey == null) {
      _appParticipantExcludedFkey =
          new AppUser(this, Keys.APP_PARTICIPANT__APP_PARTICIPANT_EXCLUDED_FKEY);
    }

    return _appParticipantExcludedFkey;
  }

  /**
   * Get the implicit join path to the <code>public.app_user</code> table, via the <code>
   * app_participant_avoid_fkey</code> key.
   */
  public AppUser appParticipantAvoidFkey() {
    if (_appParticipantAvoidFkey == null) {
      _appParticipantAvoidFkey =
          new AppUser(this, Keys.APP_PARTICIPANT__APP_PARTICIPANT_AVOID_FKEY);
    }

    return _appParticipantAvoidFkey;
  }

  /**
   * Get the implicit join path to the <code>public.app_user</code> table, via the <code>
   * app_participant_bengerl_uuid_fkey</code> key.
   */
  public AppUser appParticipantBengerlUuidFkey() {
    if (_appParticipantBengerlUuidFkey == null) {
      _appParticipantBengerlUuidFkey =
          new AppUser(this, Keys.APP_PARTICIPANT__APP_PARTICIPANT_BENGERL_UUID_FKEY);
    }

    return _appParticipantBengerlUuidFkey;
  }

  @Override
  public AppParticipant as(String alias) {
    return new AppParticipant(DSL.name(alias), this);
  }

  @Override
  public AppParticipant as(Name alias) {
    return new AppParticipant(alias, this);
  }

  @Override
  public AppParticipant as(Table<?> alias) {
    return new AppParticipant(alias.getQualifiedName(), this);
  }

  /** Rename this table */
  @Override
  public AppParticipant rename(String name) {
    return new AppParticipant(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public AppParticipant rename(Name name) {
    return new AppParticipant(name, null);
  }

  /** Rename this table */
  @Override
  public AppParticipant rename(Table<?> name) {
    return new AppParticipant(name.getQualifiedName(), null);
  }
}
