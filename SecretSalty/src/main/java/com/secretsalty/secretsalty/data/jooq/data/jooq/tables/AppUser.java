/*
 * This file is generated by jOOQ.
 */
package data.jooq.tables;

import data.jooq.Keys;
import data.jooq.Public;
import data.jooq.tables.records.AppUserRecord;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class AppUser extends TableImpl<AppUserRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>public.app_user</code> */
  public static final AppUser APP_USER = new AppUser();

  /** The class holding records for this type */
  @Override
  public Class<AppUserRecord> getRecordType() {
    return AppUserRecord.class;
  }

  /** The column <code>public.app_user.uuid</code>. */
  public final TableField<AppUserRecord, java.util.UUID> UUID =
      createField(
          DSL.name("uuid"),
          SQLDataType.UUID
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)),
          this,
          "");

  /** The column <code>public.app_user.created</code>. */
  public final TableField<AppUserRecord, LocalDateTime> CREATED =
      createField(
          DSL.name("created"),
          SQLDataType.LOCALDATETIME(6)
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  /** The column <code>public.app_user.last_modified</code>. */
  public final TableField<AppUserRecord, LocalDateTime> LAST_MODIFIED =
      createField(
          DSL.name("last_modified"),
          SQLDataType.LOCALDATETIME(6)
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  /** The column <code>public.app_user.email</code>. */
  public final TableField<AppUserRecord, String> EMAIL =
      createField(DSL.name("email"), SQLDataType.VARCHAR.nullable(false), this, "");

  /** The column <code>public.app_user.display_name</code>. */
  public final TableField<AppUserRecord, String> DISPLAY_NAME =
      createField(DSL.name("display_name"), SQLDataType.VARCHAR.nullable(false), this, "");

  /** The column <code>public.app_user.icon</code>. */
  public final TableField<AppUserRecord, String> ICON =
      createField(DSL.name("icon"), SQLDataType.VARCHAR.nullable(false), this, "");

  /** The column <code>public.app_user.interests</code>. */
  public final TableField<AppUserRecord, String> INTERESTS =
      createField(DSL.name("interests"), SQLDataType.VARCHAR, this, "");

  /** The column <code>public.app_user.is_guest</code>. */
  public final TableField<AppUserRecord, Boolean> IS_GUEST =
      createField(
          DSL.name("is_guest"),
          SQLDataType.BOOLEAN
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)),
          this,
          "");

  /** The column <code>public.app_user.group_uuid</code>. */
  public final TableField<AppUserRecord, java.util.UUID> GROUP_UUID =
      createField(DSL.name("group_uuid"), SQLDataType.UUID, this, "");

  /** The column <code>public.app_user.personal_invite</code>. */
  public final TableField<AppUserRecord, String> PERSONAL_INVITE =
      createField(DSL.name("personal_invite"), SQLDataType.VARCHAR, this, "");

  /** The column <code>public.app_user.firebase_uid</code>. */
  public final TableField<AppUserRecord, String> FIREBASE_UID =
      createField(DSL.name("firebase_uid"), SQLDataType.VARCHAR, this, "");

  private AppUser(Name alias, Table<AppUserRecord> aliased) {
    this(alias, aliased, null);
  }

  private AppUser(Name alias, Table<AppUserRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>public.app_user</code> table reference */
  public AppUser(String alias) {
    this(DSL.name(alias), APP_USER);
  }

  /** Create an aliased <code>public.app_user</code> table reference */
  public AppUser(Name alias) {
    this(alias, APP_USER);
  }

  /** Create a <code>public.app_user</code> table reference */
  public AppUser() {
    this(DSL.name("app_user"), null);
  }

  public <O extends Record> AppUser(Table<O> child, ForeignKey<O, AppUserRecord> key) {
    super(child, key, APP_USER);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Public.PUBLIC;
  }

  @Override
  public UniqueKey<AppUserRecord> getPrimaryKey() {
    return Keys.APP_USER_PKEY;
  }

  @Override
  public List<UniqueKey<AppUserRecord>> getUniqueKeys() {
    return Arrays.asList(Keys.APP_USER_EMAIL_KEY, Keys.APP_USER_FIREBASE_UID_KEY);
  }

  @Override
  public List<ForeignKey<AppUserRecord, ?>> getReferences() {
    return Arrays.asList(Keys.APP_USER__FK_GUEST_GROUP_ID);
  }

  private transient AppGroup _appGroup;

  /** Get the implicit join path to the <code>public.app_group</code> table. */
  public AppGroup appGroup() {
    if (_appGroup == null) {
      _appGroup = new AppGroup(this, Keys.APP_USER__FK_GUEST_GROUP_ID);
    }

    return _appGroup;
  }

  @Override
  public AppUser as(String alias) {
    return new AppUser(DSL.name(alias), this);
  }

  @Override
  public AppUser as(Name alias) {
    return new AppUser(alias, this);
  }

  @Override
  public AppUser as(Table<?> alias) {
    return new AppUser(alias.getQualifiedName(), this);
  }

  /** Rename this table */
  @Override
  public AppUser rename(String name) {
    return new AppUser(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public AppUser rename(Name name) {
    return new AppUser(name, null);
  }

  /** Rename this table */
  @Override
  public AppUser rename(Table<?> name) {
    return new AppUser(name.getQualifiedName(), null);
  }
}
