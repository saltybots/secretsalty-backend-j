/*
 * This file is generated by jOOQ.
 */
package data.jooq.tables;

import data.jooq.Public;
import data.jooq.tables.records.GuestRecord;
import java.time.LocalDateTime;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Guest extends TableImpl<GuestRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>public.guest</code> */
  public static final Guest GUEST = new Guest();

  /** The class holding records for this type */
  @Override
  public Class<GuestRecord> getRecordType() {
    return GuestRecord.class;
  }

  /** The column <code>public.guest.uuid</code>. */
  public final TableField<GuestRecord, java.util.UUID> UUID =
      createField(DSL.name("uuid"), SQLDataType.UUID, this, "");

  /** The column <code>public.guest.created</code>. */
  public final TableField<GuestRecord, LocalDateTime> CREATED =
      createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6), this, "");

  /** The column <code>public.guest.last_modified</code>. */
  public final TableField<GuestRecord, LocalDateTime> LAST_MODIFIED =
      createField(DSL.name("last_modified"), SQLDataType.LOCALDATETIME(6), this, "");

  /** The column <code>public.guest.email</code>. */
  public final TableField<GuestRecord, String> EMAIL =
      createField(DSL.name("email"), SQLDataType.VARCHAR, this, "");

  /** The column <code>public.guest.display_name</code>. */
  public final TableField<GuestRecord, String> DISPLAY_NAME =
      createField(DSL.name("display_name"), SQLDataType.VARCHAR, this, "");

  /** The column <code>public.guest.group_uuid</code>. */
  public final TableField<GuestRecord, java.util.UUID> GROUP_UUID =
      createField(DSL.name("group_uuid"), SQLDataType.UUID, this, "");

  /** The column <code>public.guest.personal_invite</code>. */
  public final TableField<GuestRecord, String> PERSONAL_INVITE =
      createField(DSL.name("personal_invite"), SQLDataType.VARCHAR, this, "");

  private Guest(Name alias, Table<GuestRecord> aliased) {
    this(alias, aliased, null);
  }

  private Guest(Name alias, Table<GuestRecord> aliased, Field<?>[] parameters) {
    super(
        alias,
        null,
        aliased,
        parameters,
        DSL.comment(""),
        TableOptions.view(
            """
                create view "guest" as  SELECT app_user.uuid,
                  app_user.created,
                  app_user.last_modified,
                  app_user.email,
                  app_user.display_name,
                  app_user.group_uuid,
                  app_user.personal_invite
                 FROM app_user
                WHERE (app_user.is_guest IS TRUE);
                """));
  }

  /** Create an aliased <code>public.guest</code> table reference */
  public Guest(String alias) {
    this(DSL.name(alias), GUEST);
  }

  /** Create an aliased <code>public.guest</code> table reference */
  public Guest(Name alias) {
    this(alias, GUEST);
  }

  /** Create a <code>public.guest</code> table reference */
  public Guest() {
    this(DSL.name("guest"), null);
  }

  public <O extends Record> Guest(Table<O> child, ForeignKey<O, GuestRecord> key) {
    super(child, key, GUEST);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Public.PUBLIC;
  }

  @Override
  public Guest as(String alias) {
    return new Guest(DSL.name(alias), this);
  }

  @Override
  public Guest as(Name alias) {
    return new Guest(alias, this);
  }

  @Override
  public Guest as(Table<?> alias) {
    return new Guest(alias.getQualifiedName(), this);
  }

  /** Rename this table */
  @Override
  public Guest rename(String name) {
    return new Guest(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Guest rename(Name name) {
    return new Guest(name, null);
  }

  /** Rename this table */
  @Override
  public Guest rename(Table<?> name) {
    return new Guest(name.getQualifiedName(), null);
  }
}
