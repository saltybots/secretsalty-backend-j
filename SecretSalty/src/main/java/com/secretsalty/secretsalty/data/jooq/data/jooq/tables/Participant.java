/*
 * This file is generated by jOOQ.
 */
package data.jooq.tables;


import data.jooq.Keys;
import data.jooq.Public;
import data.jooq.tables.records.ParticipantRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Participant extends TableImpl<ParticipantRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.participant</code>
     */
    public static final Participant PARTICIPANT = new Participant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ParticipantRecord> getRecordType() {
        return ParticipantRecord.class;
    }

    /**
     * The column <code>public.participant.group_id</code>.
     */
    public final TableField<ParticipantRecord, UUID> GROUP_ID = createField(DSL.name("group_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.participant.user_id</code>.
     */
    public final TableField<ParticipantRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.participant.created</code>.
     */
    public final TableField<ParticipantRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.participant.last_modified</code>.
     */
    public final TableField<ParticipantRecord, LocalDateTime> LAST_MODIFIED = createField(DSL.name("last_modified"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.participant.excluded</code>.
     */
    public final TableField<ParticipantRecord, UUID> EXCLUDED = createField(DSL.name("excluded"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.participant.avoid</code>.
     */
    public final TableField<ParticipantRecord, UUID> AVOID = createField(DSL.name("avoid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.participant.interests</code>.
     */
    public final TableField<ParticipantRecord, String> INTERESTS = createField(DSL.name("interests"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.participant.bengerl_id</code>.
     */
    public final TableField<ParticipantRecord, UUID> BENGERL_ID = createField(DSL.name("bengerl_id"), SQLDataType.UUID, this, "");

    private Participant(Name alias, Table<ParticipantRecord> aliased) {
        this(alias, aliased, null);
    }

    private Participant(Name alias, Table<ParticipantRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.participant</code> table reference
     */
    public Participant(String alias) {
        this(DSL.name(alias), PARTICIPANT);
    }

    /**
     * Create an aliased <code>public.participant</code> table reference
     */
    public Participant(Name alias) {
        this(alias, PARTICIPANT);
    }

    /**
     * Create a <code>public.participant</code> table reference
     */
    public Participant() {
        this(DSL.name("participant"), null);
    }

    public <O extends Record> Participant(Table<O> child, ForeignKey<O, ParticipantRecord> key) {
        super(child, key, PARTICIPANT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<ParticipantRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PARTICIPANT__PARTICIPANT_GROUP_ID_FKEY, Keys.PARTICIPANT__PARTICIPANT_USER_ID_FKEY, Keys.PARTICIPANT__PARTICIPANT_EXCLUDED_FKEY, Keys.PARTICIPANT__PARTICIPANT_AVOID_FKEY, Keys.PARTICIPANT__PARTICIPANT_BENGERL_ID_FKEY);
    }

    private transient Group _group;
    private transient User _participantUserIdFkey;
    private transient User _participantExcludedFkey;
    private transient User _participantAvoidFkey;
    private transient User _participantBengerlIdFkey;

    /**
     * Get the implicit join path to the <code>public.group</code> table.
     */
    public Group group() {
        if (_group == null)
            _group = new Group(this, Keys.PARTICIPANT__PARTICIPANT_GROUP_ID_FKEY);

        return _group;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>participant_user_id_fkey</code> key.
     */
    public User participantUserIdFkey() {
        if (_participantUserIdFkey == null)
            _participantUserIdFkey = new User(this, Keys.PARTICIPANT__PARTICIPANT_USER_ID_FKEY);

        return _participantUserIdFkey;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>participant_excluded_fkey</code> key.
     */
    public User participantExcludedFkey() {
        if (_participantExcludedFkey == null)
            _participantExcludedFkey = new User(this, Keys.PARTICIPANT__PARTICIPANT_EXCLUDED_FKEY);

        return _participantExcludedFkey;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>participant_avoid_fkey</code> key.
     */
    public User participantAvoidFkey() {
        if (_participantAvoidFkey == null)
            _participantAvoidFkey = new User(this, Keys.PARTICIPANT__PARTICIPANT_AVOID_FKEY);

        return _participantAvoidFkey;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>participant_bengerl_id_fkey</code> key.
     */
    public User participantBengerlIdFkey() {
        if (_participantBengerlIdFkey == null)
            _participantBengerlIdFkey = new User(this, Keys.PARTICIPANT__PARTICIPANT_BENGERL_ID_FKEY);

        return _participantBengerlIdFkey;
    }

    @Override
    public Participant as(String alias) {
        return new Participant(DSL.name(alias), this);
    }

    @Override
    public Participant as(Name alias) {
        return new Participant(alias, this);
    }

    @Override
    public Participant as(Table<?> alias) {
        return new Participant(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Participant rename(String name) {
        return new Participant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Participant rename(Name name) {
        return new Participant(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Participant rename(Table<?> name) {
        return new Participant(name.getQualifiedName(), null);
    }
}
